 (require "manual-ex.rkt") package: manual-test

(f) -> integer?

A function.

(g x y) -> integer?
  x : void?        
  y : void?        

A function with two arguments.

(h x #:y y) -> integer?
  x : void?            
  y : void?            

A “function” with a keyword argument.

(i x [#:y y]) -> integer?
  x : void?              
  y : void? = (void)     

A function with an optional keyword argument.

(f) -> integer?

A function, again, not a link target.

(f) -> integer?
 = 10          

A function, again, not a link target, documented to return 10.

(f) -> integer? 
 = (define x 10)
   x            

A function, again, not a link target, documented to return 10 using a
definition.

(g x) -> integer?
  x : void?      

A “function,” again, not a link target.

(j) -> void?

Source is i, documents j.

(f) -> integer? 
(g x y) -> void?
  x : void?     
  y : void?     

Functions, yet again.

(m datum)

A syntactic form.

(m datum)

A syntactic form, again.

(m datum)

A “macro,” again.

(m datum)     
(m same-datum)

A “macro,” yet again.

(m datum)

Yet again.

n

An identifier form.

n

An identifier form, again.

(m datum)
Specification of m.

(p) -> integer?
(p k) -> void? 
  k : integer? 

A parameter

(p) -> integer?
(p k) -> void? 
  k : integer? 

A parameter, again.

(p) -> integer?
(p k) -> void? 
  k : integer? 
 = 10          

A parameter, again, with a documented default value.

(val:param) -> any/c  
(val:param k) -> void?
  k : any/c           
 = 'foo               

A parameter with auto-value.

(p) -> integer?
(p k) -> void? 
  k : real?    

A parameter, yet again.

(p) -> integer?
(p k) -> void? 
  k : real?    
 = 10          

A parameter, yet again, with a documented default value.

(q) -> boolean? 
(q on?) -> void?
  on? : any/c   

A boolean parameter.

(q) -> boolean?       
(q still-on?) -> void?
  still-on? : any/c   

A boolean parameter, again.

(q) -> boolean?       
(q still-on?) -> void?
  still-on? : any/c   
 = #f                 

A boolean parameter, again, with a documented default value.

v : integer?

A thing.

v : integer?

A thing, again.

v : integer? = 10

A thing, again, with a documented value.

v : integer?                                         
 = 12345678901234567890123456789012345678901234567890

A thing, again, with a documented value that’s too wide to fit on one
line.

val:flvector : any/c = #fl(1.0 2.0)

Test auto-value flvector reading.

val:fxvector : any/c = #fx(1 2)

Test auto-value fxvector reading.

val:extflonum : any/c = 1.0t0

Test auto-value extflonum reading.

val:kw : any/c = '#:foo

Test auto-value keyword reading.

val:list : any/c = '(1 2 3 4)

Test auto-value list reading.

val:vector : any/c = #(1 2 3 4)

Test auto-value vector reading.

(struct pt (x y)                     
    #:extra-constructor-name make-pt)
  x : real?                          
  y : real?                          

A structure type with extra name.

(struct pn (x y))
  x : real?      
  y : real?      

A structure type.

(struct pn (x y))
  x : real?      
  y : real?      

A structure type, again.

(struct pn (x y)  
    #:transparent)
  x : real?       
  y : real?       

A transparent structure type, again.

(struct pn (x y)  
    #:transparent)
  x : real?       
  y : real?       

A transparent structure type, again.

(struct pn (x y)
    #:prefab)   
  x : real?     
  y : real?     

A prefab structure type, again.

(struct pn (x y)          
    #:constructor-name pt)
  x : real?               
  y : real?               

A structure type with name, again.

(struct pn (x y)                
    #:extra-constructor-name pt)
  x : real?                     
  y : real?                     

A structure type with extra name, again.

(struct pt (x y)                    
    #:extra-constructor-name make-pt
    #:mutable)                      
  x : real?                         
  y : real?                         

A mutable structure type with extra name, again.

(struct a-struct-with-an-extremely-long-name-and-no-fields ()
    #:extra-constructor-name                                 
    make-a-struct-with-an-extremely-long-name-and-no-fields) 

Used to raise error, taking car of empty fields list. Reported by Carlos
Lopez, 2017-03-11.

 (require "manual-ex0.rkt")

 #lang "manual-ex0.rkt"

 #reader "manual-ex0.rkt"

1. Sub2

 (require "manual-ex2.rkt")

2. Sub2a

 (require "manual-ex2a.rkt")

3. Sub3

 #lang "manual-ex3.rkt"

4. Sub3a

 #lang "manual-ex3a.rkt"

5. Sub4-5

 (require "manual-ex4.rkt")
 (require "manual-ex5.rkt")

6. Sub4a-5a

 (require "manual-ex4a.rkt")
 (require "manual-ex5a.rkt")

7. Sub6

 (load "manual-ex6.rkt")

8. Sub6a

 (load "manual-ex6a.rkt")

9. Sub7

 (require "manual-ex7.rkt")

10. Sub7a

 (require "manual-ex7a.rkt")

11. Sub8

 #reader "manual-ex8.rkt"

12. Sub8a

 #reader "manual-ex8a.rkt"

13. Sub8b

 #reader "manual-ex8b.rkt"
